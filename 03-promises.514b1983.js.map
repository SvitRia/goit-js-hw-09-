{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAWH,EAAKE,cAAc,UA4CpC,SAASE,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC7B,MAAMC,EAAgBC,KAAKC,SAAW,GAEnCC,YAAW,KACNH,EACDF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE3BA,EAAM,G,CArDfN,EAAKc,iBAAiB,UAEtB,SAAuBC,GACrBA,EAAIC,iBACJ,MAAQV,MAAAW,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAIK,cAAcC,SAElD,GAAGJ,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EAEvD,OAF4DC,EAAAzB,GAAS0B,OAAOC,QAAQ,uCACpFV,EAAIK,cAAcM,QAEf,IAAIC,EAAI,EACR,EAAG,CACHxB,EAASyB,UAAW,EACnBD,GAAK,EACN,MAAME,EAASC,SAASb,EAAMK,OAASQ,SAASZ,EAAKI,QAAUK,EAAI,GAEnEvB,EAAcuB,EAAEE,GACfE,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBiB,EAAAzB,GAAS0B,OAAOQ,QAAS,uBAAqB3B,QAAiBC,MAAU,IAEzE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MACnBiB,EAAAzB,GAAS0B,OAAOU,QAAU,sBAAoB7B,QAAiBC,MAAU,G,OAEjEqB,EAAIG,SAASX,EAAOG,O,IArBlCnB,EAASyB,UAAW","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst btnStart = form.querySelector('button')\nform.addEventListener(\"submit\", onListPromise)\nbtnStart.disabled = false;\nfunction onListPromise(evt) {\n  evt.preventDefault();\n  const { delay, step, amount } = evt.currentTarget.elements;\n\n  if(delay.value < 0 || step.value < 0 || amount.value < 0) { Notiflix.Notify.warning('Please enter a positive number');\n  evt.currentTarget.reset()\n  return} \n     let i = 0;\n     do {\n     btnStart.disabled = true;\n      i += 1;\n     const delays = parseInt(delay.value) + parseInt(step.value) * (i - 1);\n    \n     createPromise(i,delays)\n     .then(({ position, delay }) => {\n      Notiflix.Notify.success( `✅ Fulfilled promise ${position} in ${delay}ms`)\n     })\n     .catch(({ position, delay }) => {\n      Notiflix.Notify.failure ( `❌ Rejected promise ${position} in ${delay}ms`)\n     })\n     } while (i < parseInt(amount.value))\n\n  //   function createNextPromise() { \n  //     i += 1;\n  //    const delays = parseInt(delay.value) + parseInt(step.value) * (i - 1);\n    \n  //    createPromise(i,delays)\n  //    .then(({ position, delay }) => {\n  //     Notiflix.Notify.success( `✅ Fulfilled promise ${position} in ${delay}ms`)\n  //    })\n  //    .catch(({ position, delay }) => {\n  //     Notiflix.Notify.failure ( `❌ Rejected promise ${position} in ${delay}ms`)\n  //    })\n  //    if (i < parseInt(amount.value)) {\n  //     setTimeout(createNextPromise(), delays); \n  //   }\n   \n  // }\n  // createNextPromise();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n \n     setTimeout(()=>{\n      if (shouldResolve) {\n         resolve({ position, delay })\n         } else {\n         reject({ position, delay })\n         }\n      }, delay)\n})\n}\n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$btnStart","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delay1","step","amount","currentTarget","elements","value","$parcel$interopDefault","Notify","warning","reset","i","disabled","delays","parseInt","then","success","catch","failure"],"version":3,"file":"03-promises.514b1983.js.map"}