{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAWH,EAAKE,cAAc,UA4CpC,SAASE,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC7B,IAAMC,EAAgBC,KAAKC,SAAW,GAEnCC,YAAW,WACNH,EACDF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEnBA,E,IArDTN,EAAKc,iBAAiB,UAEtB,SAAuBC,GACrBA,EAAIC,iBACJ,IAAgCC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAErB,GAAGF,EAAMG,MAAQ,GAAKF,EAAKE,MAAQ,GAAKD,EAAOC,MAAQ,EAEvD,OAF4DC,EAAA1B,GAAS2B,OAAOC,QAAQ,uCACpFX,EAAIG,cAAcS,QAEf,IAAIC,EAAI,EACR,EAAG,CACHzB,EAAS0B,UAAW,EACnBD,GAAK,EACN,IAAME,EAASC,SAASX,EAAMG,OAASQ,SAASV,EAAKE,QAAUK,EAAI,GAEnExB,EAAcwB,EAAEE,GACfE,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBkB,EAAA1B,GAAS2B,OAAOS,QAAS,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAEvE8B,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACnBkB,EAAA1B,GAAS2B,OAAOY,QAAU,sBAAuCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,UAE/DsB,EAAIG,SAAST,EAAOC,O,IArBlCpB,EAAS0B,UAAW,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst btnStart = form.querySelector('button')\nform.addEventListener(\"submit\", onListPromise)\nbtnStart.disabled = false;\nfunction onListPromise(evt) {\n  evt.preventDefault();\n  const { delay, step, amount } = evt.currentTarget.elements;\n\n  if(delay.value < 0 || step.value < 0 || amount.value < 0) { Notiflix.Notify.warning('Please enter a positive number');\n  evt.currentTarget.reset()\n  return} \n     let i = 0;\n     do {\n     btnStart.disabled = true;\n      i += 1;\n     const delays = parseInt(delay.value) + parseInt(step.value) * (i - 1);\n    \n     createPromise(i,delays)\n     .then(({ position, delay }) => {\n      Notiflix.Notify.success( `✅ Fulfilled promise ${position} in ${delay}ms`)\n     })\n     .catch(({ position, delay }) => {\n      Notiflix.Notify.failure ( `❌ Rejected promise ${position} in ${delay}ms`)\n     })\n     } while (i < parseInt(amount.value))\n\n  //   function createNextPromise() { \n  //     i += 1;\n  //    const delays = parseInt(delay.value) + parseInt(step.value) * (i - 1);\n    \n  //    createPromise(i,delays)\n  //    .then(({ position, delay }) => {\n  //     Notiflix.Notify.success( `✅ Fulfilled promise ${position} in ${delay}ms`)\n  //    })\n  //    .catch(({ position, delay }) => {\n  //     Notiflix.Notify.failure ( `❌ Rejected promise ${position} in ${delay}ms`)\n  //    })\n  //    if (i < parseInt(amount.value)) {\n  //     setTimeout(createNextPromise(), delays); \n  //   }\n   \n  // }\n  // createNextPromise();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n \n     setTimeout(()=>{\n      if (shouldResolve) {\n         resolve({ position, delay })\n         } else {\n         reject({ position, delay })\n         }\n      }, delay)\n})\n}\n\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$btnStart","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","value","$parcel$interopDefault","Notify","warning","reset","i","disabled","delays","parseInt","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.db751b59.js.map"}